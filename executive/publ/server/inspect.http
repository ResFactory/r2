// ===========================================================================
// HTTP APIs Client inspection Utilities
// * https://marketplace.visualstudio.com/items?itemName=humao.rest-client
// * To help maintain proper secrets, the client API calls use 12-factor app
//   strategy of using granular environment variables. If you're running this
//   in VS Code be sure to call VS Code from the same environment where
//   `pubctl.ts` will be run so that `.envrc` will be origin'd properly.
//
// This should work (yes, it's a little wierd but follow it exactly because
// the first `cd` is necessary to use `direnv` in that specific path but the
// factory.mgit.code-workspace assumes it's being run from $HOME/workspaces):
//
//   ❯ cd $HOME/workspaces/github.com/resFactory/factory
//   ❯ code ../../../factory.mgit.code-workspace
// ===========================================================================

# ----------------------------------------------------------------------------
# Typescript to Javascript auto-bundling
# ----------------------------------------------------------------------------
# *.auto.js routes are served by static using TS/JS "twin" renderer
# *.ts routes are served by server.ts by rendering TS to JS when required
# *.mjs routes are served by server.ts by rendering TS to JS when required
# ----------------------------------------------------------------------------

@serverURL = {{$processEnv PUBCTL_SERVER_PUBLIC_URL_LOCATION}}

GET {{serverURL}}/server-ua-context.mjs
Accept: text/javascript

###

GET {{serverURL}}/server-ua-context.js
Accept: text/javascript

###

GET {{serverURL}}/server-ua-context.cjs
Accept: text/javascript

###

# Forces an error, to test whether errors are trapped properly

GET {{serverURL}}/error

###

# ----------------------------------------------------------------------------
# /SQL/publ/DQL publication-db routes which can run arbitrary SQL DQL (select)
# statements onpubctl.sqlite.db and return results as either rows or records.
# ----------------------------------------------------------------------------
@sqlPublDqlURL = {{serverURL}}/SQL/publ/DQL

# list all columns defined in the database

POST {{sqlPublDqlURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SELECT sqlite_master.name as table_name, table_info.* FROM sqlite_master JOIN pragma_table_info(sqlite_master.name) as table_info",
  "resultNature": "records"
}

###
POST {{sqlPublDqlURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select * from publ_host",
  "resultNature": "records"
}

###
POST {{sqlPublDqlURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select * from publ_build_event",
  "resultNature": "rows"
}

###
POST {{sqlPublDqlURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select * from publ_server_service",
  "resultNature": "records"
}

###
POST {{sqlPublDqlURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SELECT created_at, asset_nature, status, location_href, filesys_target_path, filesys_target_symlink FROM publ_server_static_access_log ORDER BY created_at DESC LIMIT 100",
  "resultNature": "records"
}

###
POST {{sqlPublDqlURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SELECT * from publ_server_error_log LIMIT 50",
  "resultNature": "records"
}

###

@alaSqlProxyURL = {{serverURL}}/SQL/asp

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW DATABASES",
  "resultNature": "model"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW COLUMNS from dbms_reflection_inventory from prime",
  "resultNature": "models"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select value * from prime.dbms_reflection_inventory",
  "resultNature": "no-decoration"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW COLUMNS from dbmsInventory from prime",
  "resultNature": "records"
}

###

# TODO: figure out how to access engine->databases(filter)->tables(filter), etc.
# not sure about how to use @{databases} syntax, ended up flattening

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select value [databases] from prime.dbmsInventory",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select * from prime.dbms_reflection_prepare_db_tx_log where error is not null",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW TABLES from config",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW COLUMNS from prime from config",
  "resultNature": "records"
}
###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select operationalCtx->projectRootPath('/.envrc', true) as test_path from config.prime",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select * from config.environment",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW TABLES from pubctl",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select * from pubctl.publ_host",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW TABLES from observability",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "select * from observability.health_check",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW COLUMNS from universal_metric from observability",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SHOW INDEX from universal_metric from observability",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SELECT * from observability.universal_metric",
  "resultNature": "records"
}

###

POST {{alaSqlProxyURL}}
Content-Type: application/json
Accept: application/json

{
  "SQL": "SELECT created_at, asset_nature, status, location_href, filesys_target_path, filesys_target_symlink FROM pubctl.publ_server_static_access_log ORDER BY created_at DESC LIMIT 100",
  "resultNature": "records"
}


# -----------------------------------
# /unsafe-server-runtime-proxy routes
# -----------------------------------

###

@serverRuntimeJsTsProxyEndpoint = {{serverURL}}/unsafe-server-runtime-proxy
@srJsTsEvalEndpoint = {{serverRuntimeJsTsProxyEndpoint}}/eval
@srJsTsModuleEndpoint = {{serverRuntimeJsTsProxyEndpoint}}/module

###
# in /server-runtime-proxy/eval the "this" refers to ServerRuntimeJsTsProxyMiddlewareSupplier instance
# and this.exposureCtx will be arbitrary (based on whatever the server wants to expose)

GET {{srJsTsEvalEndpoint}}/this.exposureCtx.publication.state.resourcesIndex.resourcesIndex.length

###
## in /unsafe-server-runtime-proxy/module we need to pass in either a typescript or javascript module;
## use *.js or *.ts as the extension (path or name can be anything), text/plain as content-type and POST the source

POST {{srJsTsModuleEndpoint}}/project.js.json
Content-Type: text/plain

// any Javascript you want can be passed in POST body; you can return a string
// which will be passed as-is to the browser or an object/JSON which will be
// intelligently serialized
export default ({ publication }) => {
    const projectRootPath = publication.config.operationalCtx.projectRootPath;
    return {
      projectHome: projectRootPath("/", true),
      envrc: projectRootPath("/.envrc", true),
    };
};

###

POST {{srJsTsModuleEndpoint}}/design-system.js.json
Content-Type: text/plain

// this code will be run on the server side and the return value be JSON;
// everything after /unsafe-server-runtime-proxy/module (e.g. /design-system.js.json)
// is arbitrary and for user-agent benefit
export default ({ publication }) => publication.ds.designSystem;

###

POST {{srJsTsModuleEndpoint}}/design-system-layouts.js.json
Content-Type: text/plain

// use Array.from() since layouts.values() is an iterator; arrays are valid JSON
export default ({ publication }) => Array.from(publication.ds.designSystem.layoutStrategies.layouts.values());

###

POST {{srJsTsModuleEndpoint}}/global-sql-db-conns.js.json
Content-Type: text/plain

// we convert to JSON ourselves since we have to do some special processing for
// possible bigints
export default ({ globalSqlDbConns }) => JSON.stringify(
    globalSqlDbConns,
    (key, value) => {
        if (typeof value === "bigint") return value.toString();
        if (value instanceof Map) {
            return Object.fromEntries(value);
        }
        return value;
    },
);

###

POST {{srJsTsModuleEndpoint}}/publication-db.js.json
Content-Type: text/plain

export default ({ publicationDB }) => ({ sqliteFileName: publicationDB ? publicationDB.dbStoreFsPath : `publicationDB not provided` });

###
# in /unsafe-server-runtime-proxy/module we need to pass in either a typescript
# or javascript module; use *.js or *.ts as name, text/plain as content-type and
# POST the source code that should be executed on the server

POST {{srJsTsModuleEndpoint}}/any-name.ts.json
Content-Type: text/plain

// any Typescript you want can be passed in POST body; you can return a string
// which will be passed as-is to the browser or an object/JSON which will be
// intelligently serialized
export default ({ publication }: any, { pathInfo, payload }: any) => [publication.state.resourcesIndex.resourcesIndex.length, pathInfo, payload];

###
# ------------------
# /workspace routes
# ------------------

@workspaceEndpoint = {{serverURL}}/workspace
@workspaceEventSourceEndpoint = {{workspaceEndpoint}}/sse
@workspaceInspectEndpoint = {{workspaceEndpoint}}/inspect

GET {{workspaceEventSourceEndpoint}}/ping
Content-Type: application/json

###

GET {{workspaceInspectEndpoint}}/env-vars.json
Content-Type: application/json

// TODO: make these testable via inspect.http
// * /workspace/editor-resolver/factory/**/* to get JSON for where a RF source file can be found
// * /workspace/editor-redirect/factory/**/* to redirect to an RF source file (e.g. opens VSCode)
// * /workspace/editor-resolver/publication/**/* to get JSON for where a publication source file can be found
// * /workspace/editor-redirect/publication/**/* to redirect to a publication source file (e.g. opens VSCode)
// * /workspace/editor-resolver/abs/**/* to get JSON for where an arbitrary server (abs path) file can be found
// * /workspace/editor-redirect/abs/**/* to redirect to an arbitrary server file can be found (e.g. opens VSCode)
