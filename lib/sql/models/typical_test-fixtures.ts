import { path } from "../render/deps-test.ts";
import * as SQLa from "../render/mod.ts";

// typical.ts is not auto-exported in ./mod.ts because it's not universally
// applicable, so it should be imported explictly by consumers
import * as typ from "./typical.ts";

const expectType = <T>(_value: T) => {
  // Do nothing, the TypeScript compiler handles this for us
};

export function syntheticDatabaseDefn<Context extends SQLa.SqlEmitContext>(
  ddlOptions?: SQLa.SqlTextSupplierOptions<Context> & {
    readonly sqlNS?: SQLa.SqlNamespaceSupplier;
  },
) {
  const mg = typ.typicalLookupsGovn(ddlOptions);

  enum syntheticEnum1 {
    code1, // code is text, value is a number
    code2,
  }
  enum syntheticEnum2 {
    code1 = "value1",
    code2 = "value2",
  }
  const numericEnumModel = mg.enumTable(
    "synthetic_enum_numeric",
    syntheticEnum1,
  );
  const textEnumModel = mg.enumTextTable(
    "synthetic_enum_text",
    syntheticEnum2,
  );

  const publHost = mg.table("publ_host", {
    publ_host_id: mg.primaryKey(),
    host: SQLa.unique(SQLa.text()),
    host_identity: SQLa.jsonTextNullable(),
    mutation_count: SQLa.integer(),
    numeric_enum: numericEnumModel.foreignKeyRef.code(),
    ...mg.housekeeping(),
  });

  const publBuildEventName = "publ_build_event" as const;
  const publBuildEvent = mg.table(publBuildEventName, {
    publ_build_event_id: mg.primaryKey(),
    publ_host_id: publHost.foreignKeyRef.publ_host_id(SQLa.belongsTo()),
    iteration_index: SQLa.integer(),
    build_initiated_at: SQLa.dateTime(),
    build_completed_at: SQLa.dateTime(),
    build_duration_ms: SQLa.integer(),
    resources_originated_count: SQLa.integer(),
    resources_persisted_count: SQLa.integer(),
    resources_memoized_count: SQLa.integer(),
    text_enum: textEnumModel.foreignKeyRef.code(),
    ...mg.housekeeping(),
  });

  const publServerService = mg.table("publ_server_service", {
    publ_server_service_id: mg.primaryKey(),
    service_started_at: SQLa.dateTime(),
    listen_host: SQLa.text(),
    listen_port: SQLa.integer(),
    publish_url: SQLa.text(),
    publ_build_event_id: publBuildEvent.foreignKeyRef.publ_build_event_id(
      SQLa.belongsTo("service"),
    ),
    ...mg.housekeeping(),
  });

  // -- TODO: add indexes to improve query performance
  const publServerStaticAccessLog = mg.table(
    "publ_server_static_access_log",
    {
      publ_server_static_access_log_id: mg.primaryKey(),
      status: SQLa.integer(),
      asset_nature: SQLa.text(),
      location_href: SQLa.text(),
      filesys_target_path: SQLa.text(),
      filesys_target_symlink: SQLa.textNullable(),
      publ_server_service_id: publServerService.foreignKeyRef
        .publ_server_service_id(),
      ...mg.housekeeping(),
    },
  );

  // -- TODO: add indexes to improve query performance
  const publServerErrorLog = mg.table("publ_server_error_log", {
    publ_server_error_log_id: mg.primaryKey(),
    location_href: SQLa.text(),
    error_summary: SQLa.text(),
    error_elaboration: SQLa.jsonTextNullable(),
    publ_server_service_id: publServerService.foreignKeyRef
      .publ_server_service_id(),
    ...mg.housekeeping(),
  });

  // this is added for testing purposes to make sure Axiom/Domain is creating
  // proper type-safe objects, otherwise will result in Typescript compile error;
  // expectType calls are not required for non-test or production use cases
  type tablePK = SQLa.TablePrimaryKeyColumnDefn<number, Context>;
  expectType<tablePK>(publHost.primaryKey.publ_host_id);
  expectType<
    SQLa.AxiomSqlDomain<Date | undefined, Context>
  >(publHost.axiomObjectDecl.created_at);
  expectType<tablePK>(publBuildEvent.primaryKey.publ_build_event_id);
  expectType<
    SQLa.TableForeignKeyColumnDefn<
      number,
      "publ_host",
      Context
    >
  >(publBuildEvent.axiomObjectDecl.publ_host_id);

  // deno-fmt-ignore
  const DDL = SQLa.SQL<Context>(ddlOptions)`
      -- Generated by ${path.basename(import.meta.url)}. DO NOT EDIT.

      ${SQLa.typicalSqlTextLintSummary}

      ${publHost}

      ${publHost.view}

      ${publBuildEvent}

      ${publServerService}

      ${publServerStaticAccessLog}

      ${publServerErrorLog}

      ${SQLa.typicalSqlTmplEngineLintSummary}`;

  return {
    modelsGovn: mg,
    publHost,
    publBuildEvent,
    publServerService,
    publServerStaticAccessLog,
    publServerErrorLog,
    numericEnumModel,
    textEnumModel,
    DDL,
  };
}

if (import.meta.main) {
  // if we're being called as a CLI, just emit the DDL SQL:
  //    deno run -A lib/sql/render/mod_test-fixtures.ts > synthetic.sql
  //    deno run -A lib/sql/render/mod_test-fixtures.ts | sqlite3 synthetic.sqlite.db
  const dbDefn = syntheticDatabaseDefn();
  const ctx = SQLa.typicalSqlEmitContext();
  console.log(dbDefn.DDL.SQL(ctx));
}
